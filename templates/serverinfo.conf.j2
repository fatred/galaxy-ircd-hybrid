serverinfo {
	/*
	 * name: the name of this server. This cannot be changed at runtime.
	 */
	name = "{{ server_name }}";

	/*
	 * sid: a server's unique ID. This is three characters long and must
	 * be in the form [0-9][A-Z0-9][A-Z0-9]. The first character must be
	 * a digit, followed by 2 alpha-numerical letters.
	 *
	 * NOTE: The letters must be capitalized. This cannot be changed at runtime.
	 *
	 * A sid is automatically generated at runtime, if you want to configure
	 * a specific sid, uncomment the following line.
	 */
#	sid = "0HY";

	/*
	 * description: the description of the server.
	 */
	description = "{{ server_desc }}";

	/*
	 * network_name, network_desc: the name and description of the network this
	 * server is on. Shown in the 005 reply and used with serverhiding.
	 */
	network_name = "{{ network_name }}";
	network_desc = "{{ network_desc }}";

	/*
	 * hub: allow this server to act as a hub and have multiple servers
	 * connected to it.
	 */
	hub = no;

	/*
	 * vhost: the IP address to bind to when connecting outward to IPv4 servers.
	 * This should be an IPv4 address, or "*" for INADDR_ANY.
	 */
	vhost = "{{ vhost_ipv4 }}";

	/*
	 * vhost6: the IP address to bind to when connecting outward to IPv6 servers.
	 * This should be an IPv6 address, or "*" for in6addr_any.
	 */
	vhost6 = "{{ vhost_ipv6 }}";

	/*
	 * default_max_clients: the default maximum number of clients allowed
	 * to connect. This can be changed from within IRC via /QUOTE SET MAX.
	 */
	default_max_clients = 512;

	/*
	 * max_nick_length: only applies to local clients. Must be in the
	 * range of 9 to 30. Default is 9 if nothing else is specified.
	 */
	max_nick_length = 9;

	/*
	 * max_topic_length: only applies to topics set by local clients.
	 * Must be in the range of 80 to 300. Default is 80 if nothing
	 * else is specified.
	 */
	max_topic_length = 160;

	/*
	 * rsa_private_key_file: the path to the file containing the RSA key.
	 *
	 * Example commands to store a 2048 bit RSA key in rsa.key:
	 *
	 * OpenSSL/LibreSSL:
	 *    openssl genrsa -out rsa.key 2048
	 *
	 * GnuTLS:
	 *    certtool --generate-privkey --sec-param=medium --outfile rsa.key
	 *
	 * Once the RSA key is generated, it is highly recommended to lock down
	 * its file permissions:
	 *
	 *    chown <ircd-user>.<ircd.group> rsa.key
	 *    chmod 0600 rsa.key
	 */
	{% if ssl_enabled %}
	rsa_private_key_file = "{{ ssl_key_path }}";
	{% else %}
#	rsa_private_key_file = "etc/rsa.key";
    {% endif %}

	/*
	 * ssl_certificate_file: the path to the file containing our
	 * SSL certificate for encrypted client connection.
	 *
	 * This assumes your private RSA key is stored in rsa.key. You
	 * MUST have an RSA key in order to generate the certificate.
	 *
	 * Example command:
	 *
	 * OpenSSL/LibreSSL:
	 *    openssl req -new -days 365 -x509 -key rsa.key -out cert.pem
	 *
	 * GnuTLS:
	 *    certtool --generate-self-signed --load-privkey rsa.key --outfile cert.pem
	 */
	{% if ssl_enabled %}
	ssl_certificate_file = "{{ ssl_cert_path }}";
	{% else %}
#	ssl_certificate_file = "etc/cert.pem";
    {% endif %}


	/*
	 * ssl_dh_param_file: the path to the PEM encoded Diffie-Hellman
	 * parameter file. DH parameters are required when using
	 * ciphers with EDH (ephemeral Diffie-Hellman) key exchange.
	 *
	 * A DH parameter file can be created by running:
	 *
	 * OpenSSL/LibreSSL:
	 *    openssl dhparam -out dhparam.pem 2048
	 *
	 * GnuTLS:
	 *    certtool --generate-dh-params --sec-param=medium --outfile dhparam.pem
	 */
	{% if ssl_enabled %}
	ssl_dh_param_file = "{{ ssl_dh_param_path }}";
	{% else %}
#	ssl_dh_param_file = "etc/dhparam.pem";
    {% endif %}

	/*
	 * ssl_dh_elliptic_curve: defines the curve to use for the
	 * Elliptic Curve Diffie-Hellman (ECDH) algorithm.
	 * Default is ANSI X9.62 prime256v1/secp256r1 if nothing else is specified.
	 *
	 * A list of curves supported by OpenSSL can be obtained by running:
	 *
	 *    openssl ecparam -list_curves
	 *
	 * This directive currently doesn't do anything with GnuTLS support.
	 */
#	ssl_dh_elliptic_curve = "secp521r1";

	/*
	 * ssl_cipher_list: list of ciphers to support on _this_ server.
	 * Can be used to enforce specific ciphers for incoming SSL/TLS
	 * connections. If a client (which also includes incoming server
	 * connections) is not capable of using any of the ciphers listed
	 * here, the connection will simply be rejected.
	 *
	 * A list of supported ciphers can be obtained by running:
	 *
	 * OpenSSL/LibreSSL:
	 *    openssl ciphers -tls1 -v
	 *
	 * GnuTLS:
	 *    gnutls-cli --list
	 *
	 * Multiple ciphers are separated by colons. The order of preference is
	 * from left to right.
	 */
#	ssl_cipher_list = "ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA:AES256-SHA";

	/*
	 * ssl_message_digest_algorithm: defines which cryptographic hash function
	 * to use for generating fingerprint hashes of X.509 certificates.
	 * Default is SHA-256 if nothing else is specified.
	 *
	 * A list of supported message digest algorithms can be obtained by running:
	 *
	 * OpenSSL/LibreSSL:
	 *    openssl list-message-digest-algorithms
	 *
	 * GnuTLS:
	 *    gnutls-cli --list
	 */
#	ssl_message_digest_algorithm = "sha256";
};
